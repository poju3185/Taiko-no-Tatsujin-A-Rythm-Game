#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R5.6 Parameters and return values.  The difference between an argument and a return value is that an argument is passed
into a method, whereas a return value is the value returned from it.

You can have n number of arguments, whereas you can only have one return value. By varying either the number and/or type of arguments,
you change the method's signature, which means you may overload a method. Varying the return value only does not change the
method's signature and therefore does not qualify the method for overloading.

Since Java5, you can even specify a variable number of arguments aka varargs which looks something like this:
 private String[] someMethod(int nGrade, String... strNickNames) {//implementation};
Notice that the varargs parameter "String... strNickNames" must be listed last.  Calling this method would look something like this:
 String[] strReturnValues = someMethod(99, "Jim", "Jamie", "James", "Jamey", "Jimmy", "Jimbo");

R5.8 Pseudocode
Ans:
Function letterToNumber(numberWithLetter)
    n = numberWithLetter.length
    output = A[1..n] where A[1]=A[2]=..=A[n]=0
    for i=0 to n-1:
        current = numberWithLetter[i]
        if current is a number:
            output[i] = numberWithLetter[i]
        else if current is a letter:
            if current = "A" or "B" or "C":
                output[i] = 2
            if current = "D" or "E" or "F":
                output[i] = 3
            ( and so on )
            ...
            if current = "W" or "X" or "Y" or "Z":
                output[i] = 9
    return output

R5.10 Variable scope
Ans:
i in line 5: The scope of this variable is limited to the main method.
b in line 6: The scope of this variable is limited to the main method.
i in line 10: The scope of this variable is limited to the f method.
n in line 12: The scope of this variable is limited to the f method.
a in line 17: The scope of this variable is limited to the g method.
b in line 19: The scope of this variable is limited to the g method.
n in line 20: The scope of this variable is limited to for loop.
i in line 22: The scope of this variable is limited to each for loop.
The program prints 26

R5.14 Pass by value versus pass by reference
Ans:
For primitive data types such as int, when it is used as an argument it is passed by value. That means changing the
value of a and b will not affect the value of x and y.

R6.3 Considering loops
Ans:
a. 25
b. 13
c. 12
d. IndexOutOfBound
e. 11
f. 25
g. 12
h. -1

R6.10 Enhanced for-loop
Ans:
a. for (float value : values) { total = total + value; }
b. for (int value : values) { total = total + value; }
   total -= values[0];
c. int i = 0;
   for (int value : values)
   {
       if (value == target) { return i; }
       i ++;
   }

R6.23 Computing runs
function computingRuns(A[1..n])
    maxRun = 1
    currentNumber = A[1]
    curRun = 1
    for number in A[2..n]
        if number != currentNumber then
            currentNumber = number
            curRun = 1
        else
            curRun += 1
        maxRun = max(maxRun, curRun)
    return maxRun

R6.29 Multi-dimensional arrays
Fill all entries with 0.
for (int[] row : values) {
    for (int cell : row) {
        cell = 0
    }
}
Fill elements alternately with 0s and 1s in a checkerboard pattern.
for (int i = 0; i < values.length; i++) {
    for (int j = 0; j < values[0].length; j++) {
        if ((i + j) % 2 == 0) {
            values[i][j] = 0;
        } else {
            values[i][j] = 1;
        }
    }
}
Fill only the elements at the top and bottom row with zeroes.
for (int topRowCell : values[0]) {
    topRowCell = 0;
}
for (int bottomRowCell : values[0]) {
    bottomRowCell = 0;
}
Compute the sum of all elements.
int sum = 0
for (int[] row : values) {
    for (int cell : row) {
        sum += cell;
    }
}
Print the array in tabular form.
for (int[] row : values) {
    for (int cell : row) {
        System.out.printf("%2d ", cell);
    }
    System.out.println(); // Move to the next row
}

R6.34 Understanding arrays
Ans:
a. T
b. T
c. F
d. T
e. F
f. F

R7.1 Exceptions
Ans:
You will typically encounter a "File Not Found" error or exception.
Java will create the file if it doesn't exist.

R7.6 Throwing and catching
Ans:
Throwing an exception is the process of indicating that an exceptional or unexpected situation has occurred during the
execution of code.
Catching an exception is the process of handling and responding to exceptions that have been thrown by some code.

R7.7 Checked versus unchecked
Ans:
Checked exceptions are exceptions that the compiler checks at compile-time, and they extend the java.lang.Exception
class (or its subclasses other than RuntimeException and its subclasses).
Unchecked exceptions typically represent programming errors, logic errors, or conditions that the program might not be
able to recover from.
Programmers are required to either catch checked exceptions using a try-catch block or declare that the method may throw
these exceptions using the throws keyword.


R7.8 Exceptions philosophy in Java
Ans:
Because these exceptions typically represent programming errors or logic errors that the programmer should prevent
through proper coding practices. They are not expected to be caught and handled explicitly because they indicate a
fundamental issue with the code that should be fixed during development.

R7.11 What is an exception object
Ans:
1. Log or Print Information
2. Rethrow the Exception
3. Throw a Different Exception
4. Handle and Recover
5. Cleanup Resources
6. Notify Users
7. Retry or Back Off
8. Graceful Termination

R7.15 Scanner exceptions. Explain why these are either checked or unchecked.
Ans:
InputMismatchException and NoSuchElementException. Both are checked exceptions.


